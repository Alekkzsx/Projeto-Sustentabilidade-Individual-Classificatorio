import json
import random
import os

def limpar_tela():
    os.system('cls' if os.name == 'nt' else 'clear')

# Textos de recomenda√ß√µes para cada categoria
recomendacoes = {
    "agua": [
        "Reduza o tempo no banho para economizar √°gua e energia. Pequenas mudan√ßas fazem uma grande diferen√ßa!",
        "Conserte vazamentos em torneiras e encanamentos. Um pequeno gotejamento pode desperdi√ßar litros de √°gua por dia.",
        # ... Adicione mais 38 textos aqui ...
    ],
    "energia": [
        "Desligue aparelhos eletr√¥nicos quando n√£o estiverem em uso. Isso ajuda a economizar energia e reduzir custos.",
        "Troque l√¢mpadas incandescentes por LED. Elas consomem menos energia e duram mais.",
        # ... Adicione mais 38 textos aqui ...
    ],
    "residuos": [
        "Separe o lixo recicl√°vel do org√¢nico. Isso facilita a reciclagem e reduz o impacto ambiental.",
        "Evite o uso de pl√°sticos descart√°veis. Prefira alternativas reutiliz√°veis, como garrafas e sacolas.",
        # ... Adicione mais 38 textos aqui ...
    ],
    "transportes": [
        "Considere usar bicicleta ou caminhar para trajetos curtos. Isso reduz emiss√µes e melhora sua sa√∫de.",
        "Use transporte p√∫blico sempre que poss√≠vel. √â uma alternativa mais sustent√°vel e econ√¥mica.",
        # ... Adicione mais 38 textos aqui ...
    ]
}

# Textos de boas pr√°ticas para cada categoria
boas_praticas = {
    "agua": [
        "Parab√©ns por economizar √°gua! Continue reduzindo o consumo e inspire outras pessoas a fazerem o mesmo.",
        "Seu consumo de √°gua est√° excelente! Pequenas a√ß√µes como a sua ajudam a preservar recursos naturais.",
        # ... Adicione mais 38 textos aqui ...
    ],
    "energia": [
        "√ìtimo trabalho economizando energia! Continue desligando aparelhos e usando fontes renov√°veis.",
        "Seu consumo de energia est√° exemplar! Isso ajuda a reduzir emiss√µes de carbono e proteger o planeta.",
        # ... Adicione mais 38 textos aqui ...
    ],
    "residuos": [
        "Parab√©ns por reciclar! Sua contribui√ß√£o √© essencial para reduzir o impacto ambiental.",
        "Seu esfor√ßo em separar res√≠duos √© admir√°vel. Continue assim para um futuro mais sustent√°vel.",
        # ... Adicione mais 38 textos aqui ...
    ],
    "transportes": [
        "√ìtima escolha ao usar transportes sustent√°veis! Isso faz uma grande diferen√ßa para o meio ambiente.",
        "Seu uso de bicicleta ou caminhada √© inspirador. Continue promovendo a mobilidade sustent√°vel.",
        # ... Adicione mais 38 textos aqui ...
    ]
}

# Textos para a m√©dia geral
textos_media_geral = {
    "alta": [
        "Sua m√©dia geral √© excelente! Continue com suas pr√°ticas sustent√°veis e inspire outras pessoas a fazerem o mesmo.",
        "Parab√©ns! Sua m√©dia geral mostra que voc√™ est√° no caminho certo para um estilo de vida sustent√°vel.",
        # ... Adicione mais textos aqui ...
    ],
    "moderada": [
        "Sua m√©dia geral √© boa, mas h√° espa√ßo para melhorias. Continue se esfor√ßando!",
        "Voc√™ est√° indo bem, mas pode melhorar em algumas √°reas. Pequenas mudan√ßas fazem a diferen√ßa.",
        # ... Adicione mais textos aqui ...
    ],
    "baixa": [
        "Sua m√©dia geral est√° baixa. Considere adotar pr√°ticas mais sustent√°veis para melhorar.",
        "H√° espa√ßo para melhorias. Comece com pequenas mudan√ßas para reduzir seu impacto ambiental.",
        # ... Adicione mais textos aqui ...
    ]
}

def carregar_dados_usuario(usuario):
    """
    Carrega os dados do usu√°rio do arquivo JSON.
    """
    arquivo_json = "gastos_usuarios.json"
    if not os.path.exists(arquivo_json):
        print("Nenhum dado encontrado para o usu√°rio.")
        return None

    with open(arquivo_json, 'r') as f:
        dados = json.load(f)
    
    return dados.get(usuario, [])

def verificar_usuario_logado(usuario_logado):
    """
    Verifica se o usu√°rio logado existe no arquivo usuarios.json.
    """
    arquivo_usuarios = "usuarios.json"
    if not os.path.exists(arquivo_usuarios):
        print("Arquivo de usu√°rios n√£o encontrado.")
        return False

    with open(arquivo_usuarios, 'r') as f:
        usuarios = json.load(f)
    
    return usuario_logado in usuarios

def calcular_media_classificacao(dados):
    """
    Calcula a m√©dia geral das classifica√ß√µes do usu√°rio.
    """
    classificacoes = {"üü¢": 4, "üü°": 3, "üü†": 2, "üî¥": 1}
    total = 0
    count = 0

    for registro in dados:
        total += classificacoes[registro["agua"]["classificacao"][0]]
        total += classificacoes[registro["energia"]["classificacao"][0]]
        total += classificacoes[registro["residuos"]["classificacao"][0]]
        for transporte in registro["transportes"]:
            total += classificacoes[transporte["classificacao"][0]]
        count += 3 + len(registro["transportes"])

    return total / count if count > 0 else 0

def exibir_recomendacoes(dados):
    """
    Exibe recomenda√ß√µes com base na pior classifica√ß√£o do usu√°rio.
    """
    pior_categoria = None
    pior_classificacao = "üî¥"

    for registro in dados:
        if registro["agua"]["classificacao"] == pior_classificacao:
            pior_categoria = "agua"
        elif registro["energia"]["classificacao"] == pior_classificacao:
            pior_categoria = "energia"
        elif registro["residuos"]["classificacao"] == pior_classificacao:
            pior_categoria = "residuos"
        for transporte in registro["transportes"]:
            if transporte["classificacao"] == pior_classificacao:
                pior_categoria = "transportes"

    if pior_categoria:
        recomendacao = random.choice(recomendacoes[pior_categoria])
        print(f"\nRecomenda√ß√£o para melhorar sua classifica√ß√£o em {pior_categoria.capitalize()}:")
        print(recomendacao)
    else:
        print("\nParab√©ns! Nenhuma recomenda√ß√£o necess√°ria, suas classifica√ß√µes est√£o √≥timas!")

def exibir_boas_praticas(dados):
    """
    Exibe boas pr√°ticas com base na melhor classifica√ß√£o do usu√°rio.
    """
    melhor_categoria = None
    melhor_classificacao = "üü¢"

    for registro in dados:
        if registro["agua"]["classificacao"] == melhor_classificacao:
            melhor_categoria = "agua"
        elif registro["energia"]["classificacao"] == melhor_classificacao:
            melhor_categoria = "energia"
        elif registro["residuos"]["classificacao"] == melhor_classificacao:
            melhor_categoria = "residuos"
        for transporte in registro["transportes"]:
            if transporte["classificacao"] == melhor_classificacao:
                melhor_categoria = "transportes"

    if melhor_categoria:
        boas_pratica = random.choice(boas_praticas[melhor_categoria])
        print(f"\nBoas pr√°ticas para {melhor_categoria.capitalize()}:")
        print(boas_pratica)
    else:
        print("\nContinue se esfor√ßando para alcan√ßar classifica√ß√µes melhores!")

def exibir_media_geral(dados):
    """
    Exibe a m√©dia geral das classifica√ß√µes do usu√°rio.
    """
    media = calcular_media_classificacao(dados)
    if media >= 3.5:
        texto = random.choice(textos_media_geral["alta"])  # Textos para m√©dias altas
    elif media >= 2.5:
        texto = random.choice(textos_media_geral["moderada"])  # Textos para m√©dias moderadas
    else:
        texto = random.choice(textos_media_geral["baixa"])  # Textos para m√©dias baixas

    print(f"\nSua m√©dia geral √©: {media:.2f}")
    print(texto)

def main(usuario_logado):
    if not verificar_usuario_logado(usuario_logado):
        print("Usu√°rio n√£o encontrado. Verifique suas credenciais.")
        return

    while True:
        limpar_tela()
        print("\n‚ïî" + "‚ïê" * 78 + "‚ïó")
        print("‚ïë" + " RELAT√ìRIO DE BOAS PR√ÅTICAS ".center(78, '‚îÄ') + "‚ïë")
        print("‚ï†" + "‚ïê" * 78 + "‚ï£")
        print("‚ïë" + " [1] Recomenda√ß√µes ".ljust(77) + "‚ïë")
        print("‚ïë" + " [2] Boas Pr√°ticas ".ljust(77) + "‚ïë")
        print("‚ïë" + " [3] M√©dia Geral ".ljust(77) + "‚ïë")
        print("‚ïë" + " [4] Sair ".ljust(77) + "‚ïë")
        print("‚ïö" + "‚ïê" * 78 + "‚ïù")

        choice = input("‚ñ∂ Escolha uma op√ß√£o: ")
        dados = carregar_dados_usuario(usuario_logado)

        if not dados:
            print("\nNenhum dado encontrado para o usu√°rio.")
            input("Pressione Enter para voltar...")
            return

        if choice == '1':
            exibir_recomendacoes(dados)
        elif choice == '2':
            exibir_boas_praticas(dados)
        elif choice == '3':
            exibir_media_geral(dados)
        elif choice == '4':
            break
        else:
            print("Op√ß√£o inv√°lida! Tente novamente.")
        
        input("\nPressione Enter para continuar...")
        
if __name__ == "__main__":
    main(usuario_logado)